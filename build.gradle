plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.12' apply(false)
    id 'io.spring.dependency-management' version '1.1.6'
    id 'org.graalvm.buildtools.native' version '0.10.3' apply(false)
    id 'com.dynatrace.buildtools.graalnative' version '2.0.0' apply(false)
}

// def globalAgentDir = System.getenv('DT_GRAALNATIVE_AGENT_DIR')?: 'C:/workspaces/agent/test/java/build/product/graalnative'

subprojects {
    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    configurations {

    }

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.apache.httpcomponents.client5:httpclient5:5.3'
        implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.4.0'
        implementation 'org.projectlombok:lombok:1.18.32'
        annotationProcessor 'org.projectlombok:lombok:1.18.32'
        developmentOnly 'org.springframework.boot:spring-boot-devtools'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation 'com.github.javafaker:javafaker:1.0.2'
    }
}

project("exceptions") {

}

project("common") {
    dependencies {
        implementation project(":exceptions")
    }
}

project("categories") {
    apply plugin: 'org.graalvm.buildtools.native'
    apply plugin: 'com.dynatrace.buildtools.graalnative'
    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        implementation 'org.hibernate:hibernate-entitymanager:5.6.15.Final'
        implementation 'org.apache.httpcomponents.client5:httpclient5:5.3'
        runtimeOnly 'org.postgresql:postgresql'
        implementation project(':common')
        implementation project(':exceptions')
        testImplementation 'com.h2database:h2'
    }
    dynatrace {
        agentDownload {
            environmentUrl = System.getenv('DT_TENANT_URL')
            apiToken = System.getenv('DT_TOKEN')
        }
        agentOptions = System.getenv('DT_GRAALNATIVE_AGENT_OPTIONS')?: "loglevelcon=info,agentconfigpath=${projectDir.absolutePath}/agent-config.json,storage=${projectDir.absolutePath}/build/native/nativeCompile/dt"
    }
}

project("users") {
    apply plugin: 'org.graalvm.buildtools.native'
    apply plugin: 'com.dynatrace.buildtools.graalnative'
    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        implementation 'org.hibernate:hibernate-entitymanager:5.6.15.Final'
        implementation 'org.apache.httpcomponents.client5:httpclient5:5.3'
        runtimeOnly 'org.postgresql:postgresql'
        implementation project(':common')
        implementation project(':exceptions')
        testImplementation 'com.h2database:h2'
    }
    dynatrace {
        agentDownload {
            environmentUrl = System.getenv('DT_TENANT_URL')
            apiToken = System.getenv('DT_TOKEN')
        }
        agentOptions = System.getenv('DT_GRAALNATIVE_AGENT_OPTIONS')?: "loglevelcon=info,agentconfigpath=${projectDir.absolutePath}/agent-config.json,storage=${projectDir.absolutePath}/build/native/nativeCompile/dt"
    }
}

project("tasks") {
    apply plugin: 'org.graalvm.buildtools.native'
    apply plugin: 'com.dynatrace.buildtools.graalnative'
    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
        implementation 'org.apache.httpcomponents.client5:httpclient5:5.3'
        implementation project(':common')
        implementation project(':exceptions')
        testImplementation 'de.flapdoodle.embed:de.flapdoodle.embed.mongo.spring31x:4.11.0'
//        testImplementation 'de.flapdoodle.embed:de.flapdoodle.embed.mongo:4.12.2'
    }
    dynatrace {
        agentDownload {
            environmentUrl = System.getenv('DT_TENANT_URL')
            apiToken = System.getenv('DT_TOKEN')
        }
        agentOptions = System.getenv('DT_GRAALNATIVE_AGENT_OPTIONS')?: "loglevelcon=info,agentconfigpath=${projectDir.absolutePath}/agent-config.json,storage=${projectDir.absolutePath}/build/native/nativeCompile/dt"
    }
}

project("workitems") {
    apply plugin: 'org.graalvm.buildtools.native'
    apply plugin: 'com.dynatrace.buildtools.graalnative'
    dependencies {
        implementation 'org.apache.httpcomponents.client5:httpclient5:5.3'
        implementation project(':common')
        implementation project(':exceptions')
        implementation 'com.github.javafaker:javafaker:1.0.2'
    }
    dynatrace {
        agentDownload {
            environmentUrl = System.getenv('DT_TENANT_URL')
            apiToken = System.getenv('DT_TOKEN')
        }
        agentOptions = System.getenv('DT_GRAALNATIVE_AGENT_OPTIONS')?: "loglevelcon=info,agentconfigpath=${projectDir.absolutePath}/agent-config.json,storage=${projectDir.absolutePath}/build/native/nativeCompile/dt"
    }
}

allprojects {
    group = 'eu.dec21'
    version = '0.0.1-SNAPSHOT'
    java {
        sourceCompatibility = '21'
    }
    repositories {
        mavenCentral()
    }

    tasks.named('test') {
        useJUnitPlatform()
    }
}

tasks.register('dynatraceNativeCompile') {
    dependsOn(':workitems:dynatraceNativeCompile', ':users:dynatraceNativeCompile', ':tasks:dynatraceNativeCompile', ':categories:dynatraceNativeCompile')
}
